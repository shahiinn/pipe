resources:
  - name: distroless_base_image
    type: GitRepo
    configuration:
      gitProvider: shahin_test
      path: shahiinn/jfrog-distroless
      branches:
        include: ^{{gitBranch}}$ 
  - name: distroless_base_internal
    type: GitRepo
    configuration:
      gitProvider: shahin_test
      path: shahiinn/pipe    
  - name: charttestingArtifactory
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build
      buildNumber: ${run_number}
  - name: distroless_base_artifactory
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build_artifactory
      buildNumber: ${run_number}
  - name: distroless_base_distribution
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build_distribution
      buildNumber: ${run_number}
  - name: distroless_base_jfmc
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build_jfmc
      buildNumber: ${run_number}
  - name: distroless_base_insight
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build_insight
      buildNumber: ${run_number}
  - name: distroless_base_router
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build_router
      buildNumber: ${run_number}
  - name: distroless_base_xray
    type: BuildInfo
    configuration:
      sourceArtifactory: artifact_test
      buildName: Distroless_base_image_build_xray
      buildNumber: ${run_number}

pipelines:
  - name: Distroless_base_image_build
    steps:    
      - name: Start
        type: Bash
        configuration:
          outputResources:
            - name: distroless_base_image
        execution:
          onExecute:
            - echo "Starting the build"
          onSuccess:
            - echo "Triggered the build"
            
## bazel build            
            
      - name: Bazel_build_artifactory_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image1
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel build base/artifactory-sh"
          onComplete:
            - popd
      - name: Bazel_build_distribution_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image2
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel build base/distribution-sh"
          onComplete:
            - popd            
      - name: Bazel_build_insight_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image3
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel build base/insight-sh"
          onComplete:
            - popd            
      - name: Bazel_build_jfmc_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image4
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel build base/jfmc-sh"   
          onComplete:
            - popd            
      - name: Bazel_build_router_go
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image5
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel build base/router-go" 
          onComplete:
            - popd            
      - name: Bazel_build_xray_go
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image6
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel build base/xray-go"
          onComplete:
            - popd
            
## bazel test

      - name: Bazel_test_artifactory_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image1
          inputSteps:
            - name: Bazel_build_artifactory_sh
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..."
          onComplete:
            - popd
      - name: Bazel_test_distribution_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image2
          inputSteps:
            - name: Bazel_build_distribution_sh
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..."
          onComplete:
            - popd            
      - name: Bazel_test_insight_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image3
          inputSteps:
            - name: Bazel_build_insight_sh
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..."
          onComplete:
            - popd            
      - name: Bazel_test_jfmc_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image4
          inputSteps:
            - name: Bazel_build_jfmc_sh
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..."   
          onComplete:
            - popd            
      - name: Bazel_test_router_go
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image5
          inputSteps:
            - name: Bazel_build_router_go
          inputResources:
            - name: distroless_base_image
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 
          onComplete:
            - popd            
      - name: Bazel_test_xray_go
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image6
          inputSteps:
            - name: Bazel_build_xray_go
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..."
          onComplete:
            - popd
            
## bazel run            
            
      - name: Bazel_run_artifactory_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image1
          inputSteps:
            - name: Bazel_test_artifactory_sh
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel run base/artifactory-sh"
            - docker images
      - name: Bazel_run_distribution_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image2
          inputSteps:
            - name: Bazel_test_distribution_sh
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel run base/distribution-sh"
            - docker images
      - name: Bazel_run_insight_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image3
          inputSteps:
            - name: Bazel_test_insight_sh
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel run base/insight-sh"
            - docker images
      - name: Bazel_run_jfmc_sh
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image4
          inputSteps:
            - name: Bazel_test_jfmc_sh
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel run base/jfmc-sh"
            - docker images
      - name: Bazel_run_router_go
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image5
          inputSteps:
            - name: Bazel_test_router_go
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel run base/router-go"
            - docker images
      - name: Bazel_run_xray_go
        type: Bash
        configuration:
          runtime:
            type: host
          affinityGroup: image6
          inputSteps:
            - name: Bazel_test_xray_go
          inputResources:
            - name: distroless_base_image
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} chartstesting-distroless-local.jfrog.io
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 chartstesting-distroless-local.jfrog.io/bazel-docker-builder:v1 bash -c "bazel run base/xray-go"
            - docker images

## docker push

      - name: Push_artifactory_sh
        type: Bash
        configuration:
          affinityGroup: image1
          inputSteps:
            - name: Bazel_run_artifactory_sh
          outputResources:
            - name: distroless_base_artifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/artifactory-sh:artifactory-sh chartstesting-distroless-local.jfrog.io/artifactory-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push chartstesting-distroless-local.jfrog.io/artifactory-sh:${run_number} distroless-local --build-name="Distroless_base_image_build_artifactory" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp Distroless_base_image_build_artifactory ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_distribution_sh
        type: Bash
        configuration:
          affinityGroup: image2
          inputSteps:
            - name: Bazel_run_distribution_sh
          outputResources:
            - name: distroless_base_distribution
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/distribution-sh:distribution-sh chartstesting-distroless-local.jfrog.io/distribution-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push chartstesting-distroless-local.jfrog.io/distribution-sh:${run_number} distroless-local --build-name="Distroless_base_image_build_distribution" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp Distroless_base_image_build_distribution ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_insight_sh
        type: Bash
        configuration:
          affinityGroup: image3
          inputSteps:
            - name: Bazel_run_insight_sh
          outputResources:
            - name: distroless_base_insight
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/insight-sh:insight-sh chartstesting-distroless-local.jfrog.io/insight-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push chartstesting-distroless-local.jfrog.io/insight-sh:${run_number} distroless-local --build-name="Distroless_base_image_build_insight" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp Distroless_base_image_build_insight ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_jfmc_sh
        type: Bash
        configuration:
          affinityGroup: image4
          inputSteps:
            - name: Bazel_run_jfmc_sh
          outputResources:
            - name: distroless_base_jfmc
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/jfmc-sh:jfmc-sh chartstesting-distroless-local.jfrog.io/jfmc-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push chartstesting-distroless-local.jfrog.io/jfmc-sh:${run_number} distroless-local --build-name="Distroless_base_image_build_jfmc" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp Distroless_base_image_build_jfmc ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_router_go
        type: Bash
        configuration:
          affinityGroup: image5
          inputSteps:
            - name: Bazel_run_router_go
          outputResources:
            - name: distroless_base_router
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/router-go:router-go chartstesting-distroless-local.jfrog.io/router-go:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push chartstesting-distroless-local.jfrog.io/router-go:${run_number} distroless-local --build-name="Distroless_base_image_build_router" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp Distroless_base_image_build_router ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_xray_go
        type: Bash
        configuration:
          affinityGroup: image6
          inputSteps:
            - name: Bazel_run_xray_go
          outputResources:
            - name: distroless_base_xray
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/xray-go:xray-go chartstesting-distroless-local.jfrog.io/xray-go:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push chartstesting-distroless-local.jfrog.io/xray-go:${run_number} distroless-local --build-name="Distroless_base_image_build_xray" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp Distroless_base_image_build_xray ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
