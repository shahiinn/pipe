pipelines:
  - name: Distroless_base_image_build
    configuration:
      environmentVariables:
        readOnly:
          DOCKERFILELOC: customize-example
          DOCKERREPO: chartstesting-distroless-local.jfrog.io
          LOGS_URL: https://chartstesting.jfrog.io/artifactory/distroless-base-logs
          JFROG_CLI_BUILD_NAME: "Distroless_base_image_build"
          UPDATE_REPO_NAME: distroless_base_image
    steps:    
      - name: Start
        type: Bash
        configuration:
          outputResources:
            - name: distroless_base_image
        execution:
          onExecute:
            - echo "Starting the build"
          onSuccess:
            - echo "Triggered the build"
            
## bazel build            
            
      - name: Bazel_build_artifactory_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: artifactory-base-build.log
              IMAGE_FOLDER: artifactory_sh
          runtime:
            type: host
          affinityGroup: image1
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel build base/${IMAGE_FOLDER}" 2>&1 | tee -a $LOG_FILE
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_build_distribution_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: distribution-base-build.log
              IMAGE_FOLDER: distribution_sh
          runtime:
            type: host
          affinityGroup: image2
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel build base/${IMAGE_FOLDER}" 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_build_insight_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: insight-base-build.log
              IMAGE_FOLDER: insight_sh
          runtime:
            type: host
          affinityGroup: image3
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel build base/${IMAGE_FOLDER}" 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_build_jfmc_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: jfmc-base-build.log
              IMAGE_FOLDER: jfmc_sh
          runtime:
            type: host
          affinityGroup: image4
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel build base/${IMAGE_FOLDER}" 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_build_router_go
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: router-base-build.log
              IMAGE_FOLDER: router_go
          runtime:
            type: host
          affinityGroup: image5
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel build base/${IMAGE_FOLDER}" 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_build_xray_go
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: xray-base-build.log
              IMAGE_FOLDER: xray_go
          runtime:
            type: host
          affinityGroup: image6
          inputSteps:
            - name: Start
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel build base/${IMAGE_FOLDER}" 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base build failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
            
## bazel test

      - name: Bazel_test_artifactory_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: artifactory-base-test.log
              IMAGE_FOLDER: artifactory_sh
          runtime:
            type: host
          affinityGroup: image1
          inputSteps:
            - name: Bazel_build_artifactory_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_test_distribution_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: distribution-base-test.log
              IMAGE_FOLDER: distribution_sh
          runtime:
            type: host
          affinityGroup: image2
          inputSteps:
            - name: Bazel_build_distribution_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_test_insight_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: insight-base-test.log
              IMAGE_FOLDER: insight_sh
          runtime:
            type: host
          affinityGroup: image3
          inputSteps:
            - name: Bazel_build_insight_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_test_jfmc_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: jfmc-base-test.log
              IMAGE_FOLDER: jfmc_sh
          runtime:
            type: host
          affinityGroup: image4
          inputSteps:
            - name: Bazel_build_jfmc_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_test_router_go
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: router-base-test.log
              IMAGE_FOLDER: router_go
          runtime:
            type: host
          affinityGroup: image5
          inputSteps:
            - name: Bazel_build_router_go
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_test_xray_go
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: xray-base-test.log
              IMAGE_FOLDER: xray_go
          runtime:
            type: host
          affinityGroup: image6
          inputSteps:
            - name: Bazel_build_xray_go
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel test --test_output=errors --curses=no //..." 2>&1 | tee -a ${LOG_FILE}
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image test failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
            
## bazel run            
            
      - name: Bazel_run_artifactory_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: artifactory-base-run.log
              IMAGE_FOLDER: artifactory_sh
          runtime:
            type: host
          affinityGroup: image1
          inputSteps:
            - name: Bazel_test_artifactory_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel run base/artifactory-sh" 2>&1 | tee -a artifactory-base-run.log
            - docker images
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_run_distribution_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: distribution-base-run.log
              IMAGE_FOLDER: distribution_sh
          runtime:
            type: host
          affinityGroup: image2
          inputSteps:
            - name: Bazel_test_distribution_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel run base/distribution-sh" 2>&1 | tee -a distribution-base-run.log
            - docker images
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_run_insight_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: insight-base-build.log
              IMAGE_FOLDER: insight_go
          runtime:
            type: host
          affinityGroup: image3
          inputSteps:
            - name: Bazel_test_insight_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel run base/insight-sh" 2>&1 | tee -a insight-base-run.log
            - docker images
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_run_jfmc_sh
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: jfmc-base-run.log
              IMAGE_FOLDER: jfmc_sh
          runtime:
            type: host
          affinityGroup: image4
          inputSteps:
            - name: Bazel_test_jfmc_sh
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel run base/jfmc-sh" 2>&1 | tee -a jfmc-base-run.log
            - docker images
      - name: Bazel_run_router_go
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: router-base-run.log
              IMAGE_FOLDER: router_go
          runtime:
            type: host
          affinityGroup: image5
          inputSteps:
            - name: Bazel_test_router_go
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel run base/router-go" 2>&1 | tee -a router-base-run.log
            - docker images
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Bazel_run_xray_go
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: xray-base-run.log
              IMAGE_FOLDER: xray_go
          runtime:
            type: host
          affinityGroup: image6
          inputSteps:
            - name: Bazel_test_xray_go
          inputResources:
            - name: distroless_base_image
            - name: distroless_base_internal
#          outputResources:
#            - name: charttestingArtifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - pushd $res_distroless_base_image_resourcePath
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - docker login -u ${int_artifact_test_user} -p ${int_artifact_test_apikey} ${DOCKERREPO}
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD":/usr/src/app -e BUILD_NUMBER=11 ${DOCKERREPO}/bazel-docker-builder:v1 bash -c "bazel run base/xray-go" 2>&1 | tee -a xray-base-run.log
            - docker images
          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run successful" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image bazel run failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"

## docker push

      - name: Push_artifactory_sh
        type: Bash
        configuration:
          affinityGroup: image1
          inputSteps:
            - name: Bazel_run_artifactory_sh
          outputResources:
            - name: distroless_base_artifactory
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/artifactory-sh:artifactory-sh ${DOCKERREPO}/artifactory-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push ${DOCKERREPO}/artifactory-sh:${run_number} distroless-local --build-name="${JFROG_CLI_BUILD_NAME}_artifactory" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp ${JFROG_CLI_BUILD_NAME}_artifactory ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_distribution_sh
        type: Bash
        configuration:
          affinityGroup: image2
          inputSteps:
            - name: Bazel_run_distribution_sh
          outputResources:
            - name: distroless_base_distribution
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/distribution-sh:distribution-sh ${DOCKERREPO}/distribution-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push ${DOCKERREPO}/distribution-sh:${run_number} distroless-local --build-name="${JFROG_CLI_BUILD_NAME}_distribution" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp ${JFROG_CLI_BUILD_NAME}_distribution ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_insight_sh
        type: Bash
        configuration:
          affinityGroup: image3
          inputSteps:
            - name: Bazel_run_insight_sh
          outputResources:
            - name: distroless_base_insight
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/insight-sh:insight-sh ${DOCKERREPO}/insight-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push ${DOCKERREPO}/insight-sh:${run_number} distroless-local --build-name="${JFROG_CLI_BUILD_NAME}_insight" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp ${JFROG_CLI_BUILD_NAME}_insight ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_jfmc_sh
        type: Bash
        configuration:
          affinityGroup: image4
          inputSteps:
            - name: Bazel_run_jfmc_sh
          outputResources:
            - name: distroless_base_jfmc
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/jfmc-sh:jfmc-sh ${DOCKERREPO}/jfmc-sh:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push ${DOCKERREPO}/jfmc-sh:${run_number} distroless-local --build-name="${JFROG_CLI_BUILD_NAME}_jfmc" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp ${JFROG_CLI_BUILD_NAME}_jfmc ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_router_go
        type: Bash
        configuration:
          affinityGroup: image5
          inputSteps:
            - name: Bazel_run_router_go
          outputResources:
            - name: distroless_base_router
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/router-go:router-go ${DOCKERREPO}/router-go:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push ${DOCKERREPO}/router-go:${run_number} distroless-local --build-name="${JFROG_CLI_BUILD_NAME}_router" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp ${JFROG_CLI_BUILD_NAME}_router ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
      - name: Push_xray_go
        type: Bash
        configuration:
          affinityGroup: image6
          inputSteps:
            - name: Bazel_run_xray_go
          outputResources:
            - name: distroless_base_xray
          integrations:
            - name: artifact_test
        execution:
          onExecute:
            - echo "Starting the build"
            - docker tag bazel/base/xray-go:xray-go ${DOCKERREPO}/xray-go:${run_number}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt docker-push ${DOCKERREPO}/xray-go:${run_number} distroless-local --build-name="${JFROG_CLI_BUILD_NAME}_xray" --build-number=${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bp ${JFROG_CLI_BUILD_NAME}_xray ${run_number} --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey}

## Xray Scan

      - name: Scan_artifactory
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: artifactory-base-scan.log
              IMAGE_FOLDER: artifactory_sh
          affinityGroup: image1
          inputSteps:
            - name: Push_artifactory_sh
          integrations:
            - name: artifact_test
          inputResources:
            - name: distroless_base_internal
            - name: distroless_base_artifactory
        execution:
          onExecute:
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bs ${JFROG_CLI_BUILD_NAME}_artifactory ${run_number} --fail=false --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey} 2>&1 | tee -a ${LOG_FILE}
            - |
              vul_count=$(cat artifactory-scan.log | grep "\"severity\": \"High\"" | wc -l)

          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - 'update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan : Found $vul_count security issues" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"'
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
      - name: Scan_distribution
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: distribution-base-scan.log
              IMAGE_FOLDER: distribution_sh
          affinityGroup: image1
          inputSteps:
            - name: Push_distribution_sh
          integrations:
            - name: artifact_test
          inputResources:
            - name: distroless_base_internal
            - name: distroless_base_distribution
        execution:
          onExecute:
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bs ${JFROG_CLI_BUILD_NAME}_distribution ${run_number} --fail=false --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey} 2>&1 | tee -a ${LOG_FILE}
            - | 
              vul_count=$(cat distribution-scan.log | grep "\"severity\": \"High\"" | wc -l);

          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - 'update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan : Found $vul_count security issues" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"'
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"

      - name: Scan_insight
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: insight-base-scan.log
              IMAGE_FOLDER: insight_sh
          affinityGroup: image1
          inputSteps:
            - name: Push_insight_sh
          integrations:
            - name: artifact_test
          inputResources:
            - name: distroless_base_internal
            - name: distroless_base_insight
        execution:
          onExecute:
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bs ${JFROG_CLI_BUILD_NAME}_artifactory ${run_number} --fail=false --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey} 2>&1 | tee -a ${LOG_FILE}
            - | 
              vul_count=$(cat insight-scan.log | grep "\"severity\": \"High\"" | wc -l);

          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - 'update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan : Found $vul_count security issues" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"'
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"

      - name: Scan_jfmc
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: jfmc-base-scan.log
              IMAGE_FOLDER: jfmc_sh
          affinityGroup: image1
          inputSteps:
            - name: Push_jfmc_sh
          integrations:
            - name: artifact_test
          inputResources:
            - name: distroless_base_internal
            - name: distroless_base_jfmc
        execution:
          onExecute:
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bs ${JFROG_CLI_BUILD_NAME}_artifactory ${run_number} --fail=false --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey} 2>&1 | tee -a ${LOG_FILE}
            - | 
              vul_count=$(cat jfmc-scan.log | grep "\"severity\": \"High\"" | wc -l);

          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - 'update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan : Found $vul_count security issues" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"'
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"

      - name: Scan_router
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: router-base-scan.log
              IMAGE_FOLDER: router_go
          affinityGroup: image1
          inputSteps:
            - name: Push_router_go
          integrations:
            - name: artifact_test
          inputResources:
            - name: distroless_base_internal
            - name: distroless_base_router
        execution:
          onExecute:
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bs ${JFROG_CLI_BUILD_NAME}_artifactory ${run_number} --fail=false --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey} 2>&1 | tee -a ${LOG_FILE}
            - | 
              vul_count=$(cat router-scan.log | grep "\"severity\": \"High\"" | wc -l);

          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - 'update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan : Found $vul_count security issues" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"'
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"

      - name: Scan_xray
        type: Bash
        configuration:
          environmentVariables:
              LOG_FILE: xray-base-scan.log
              IMAGE_FOLDER: xray_go
          affinityGroup: image1
          inputSteps:
            - name: Push_xray_go
          integrations:
            - name: artifact_test
          inputResources:
            - name: distroless_base_internal
            - name: distroless_base_xray
        execution:
          onExecute:
            - source ${res_distroless_base_internal_resourcePath}/test/custom.sh
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt bs ${JFROG_CLI_BUILD_NAME}_artifactory ${run_number} --fail=false --server-id=chartstesting --url=${int_artifact_test_url} --user=${int_artifact_test_user} --password=${int_artifact_test_apikey} 2>&1 | tee -a ${LOG_FILE}
            - | 
              vul_count=$(cat xray-scan.log | grep "\"severity\": \"High\"" | wc -l);

          onComplete:
            - export JFROG_CLI_OFFER_CONFIG=false; jfrog rt u ${LOG_FILE} distroless-base-logs/${run_number}/${LOG_FILE} --server-id chartstesting --url ${int_charts_rt_url} --user ${int_charts_rt_user} --password ${int_charts_rt_apikey}
            - popd
          onSuccess:
            - 'update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan : Found $vul_count security issues" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"'
          onFailure:
            - update_commit_status_custom ${UPDATE_REPO_NAME} --context "${step_name}" --message "${IMAGE_FOLDER} base image scan failed!" --url "${LOGS_URL}/${run_number}/${LOG_FILE}"
